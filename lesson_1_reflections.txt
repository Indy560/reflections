How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The differences were separated out from the rest of the code and paired with eachother, one on top of the other.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I could easily pull the prior version of the code and compare for changes at any time to know where I may have created an error

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

   The pros are that I have full control over what changes are made and when they are made and can reference previous versions that are still saved. This cannot be done using an auto-save feature like Google docs has. Once the changes have been made in an auto-save, the previous version is no longer available for reference.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

   Multiple people may work on a single source code making changes to different parts of the code. Each one needs to be reviewd before being accepted.

How can you use the commands git log and git diff to view the history of files?

    git log tells me what version I am working with. Git diff can show may the difference between each version

How might using version control make you more confident to make changes that
could break something?

    If I break something, I can always refer back to the previous working version of the code.

Now that you have your workspace set up, what do you want to try using Git for?

    A practice round of reviewing differences between two versions

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	It would allow me to review what works and where errors have developed and how to re-create certain types of functionality that carry over from one program to another.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	The pros of manually choosing when to create a commit are that you can have greater control of when and why a commit is created, along with a commit message to makeit easier to understand the differences in different revisions.
	The cons are that you must rely fully on your own self-discipline and sense of logic to determine when to make a commit. Fi you wait to long or make a commit that is too small or too large, it will be difficult to follow or you may lose your work altogether.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	The reason some version control systems allow saving multiple files in one commit is because tose files may be linked to one another like an html file and a css file. If changes are made to both files that effect how they interact with one another, the commit should track the changes of both as logically linked.

How can you use the commands git log and git diff to view the history of files?
	You use the command git log to see all of the commiits in your history. You can then use get diff to see the changes between two of the commits listed in you log. (Note: Don't forget to press "space" when you see a semi-colon : and press Q to quit and get back to your prompt).

How might using version control make you more confident to make changes that could break something?

I would be more confident because I can use git checkout to look at previous running versions of my program to see where int he log an error occured, and then use git diff to look at the changes made before and right after a bug was created